apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: contexts.landscaper.gardener.cloud
spec:
  group: landscaper.gardener.cloud
  names:
    kind: Context
    plural: contexts
    shortNames:
    - ctx
    singular: context
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Context is a resource that contains shared information of installations.
          This includes information about the repository context like the context
          itself or secrets to access the oci artifacts. But it can also contain deployer
          specific config.
        properties:
          configurations:
            additionalProperties:
              description: "RawExtension is used to hold extensions in external versions.\n\nTo
                use this, make a field which has RawExtension as its type in your
                external, versioned struct, and Object in your internal struct. You
                also need to register your various plugin types.\n\n// Internal package:
                type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin
                runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption
                string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject
                struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension
                `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n//
                On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\":
                {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo
                what happens? Decode first uses json or yaml to unmarshal the serialized
                data into your external MyAPIObject. That causes the raw JSON to be
                stored, but not unpacked. The next step is to copy (using pkg/conversion)
                into the internal struct. The runtime package's DefaultScheme has
                conversion functions installed which will unpack the JSON stored in
                RawExtension, turning it into the correct object type, and storing
                it in the Object. (TODO: In the case where the object is of an unknown
                type, a runtime.Unknown object will be created and stored.)"
              type: object
              x-kubernetes-embedded-resource: true
              x-kubernetes-preserve-unknown-fields: true
            description: Configurations contains arbitrary configuration information
              for dedicated purposes given by a string key. The key should use a dns-like
              syntax to express the purpose and avoid conflicts.
            type: object
          registryPullSecrets:
            description: 'RegistryPullSecrets defines a list of registry credentials
              that are used to pull blueprints, component descriptors and jsonschemas
              from the respective registry. For more info see: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
              Note that the type information is used to determine the secret key and
              the type of the secret.'
            items:
              description: LocalObjectReference contains enough information to let
                you locate the referenced object inside the same namespace.
              properties:
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
              type: object
            type: array
          repositoryContext:
            description: RepositoryContext defines the context of the component repository
              to resolve blueprints.
            type: object
            x-kubernetes-preserve-unknown-fields: true
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
